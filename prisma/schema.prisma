generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String            @unique
  password            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  totalPoints         Int               @default(0)
  gamesPlayed         Int               @default(0)
  gamesWon            Int               @default(0)
  quizzes             Quiz[]            @relation("CreatedQuizzes")
  participatedQuizzes QuizParticipant[]
}

model Quiz {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  creator      User              @relation("CreatedQuizzes", fields: [creatorId], references: [id])
  creatorId    String            @db.ObjectId
  questions    Question[]
  participants QuizParticipant[]
  roomCode     String            @unique
  isActive     Boolean           @default(true)
  timeLimit    Int               @default(30) // seconds per question
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  quizId        String   @db.ObjectId
  text          String
  type          String // MCQ or TRUE_FALSE
  options       String[]
  correctAnswer String
  points        Int      @default(10)
  order         Int
  answers       Answer[]
}

model Answer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  question      Question        @relation(fields: [questionId], references: [id])
  questionId    String          @db.ObjectId
  participant   QuizParticipant @relation(fields: [participantId], references: [id])
  participantId String          @db.ObjectId
  answer        String
  isCorrect     Boolean
  responseTime  Int // milliseconds
  createdAt     DateTime        @default(now())
}

model QuizParticipant {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  quiz          Quiz      @relation(fields: [quizId], references: [id])
  quizId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  score         Int       @default(0)
  answers       Answer[]
  joinedAt      DateTime  @default(now())
  finishedAt    DateTime?
  currentStreak Int       @default(0)
  maxStreak     Int       @default(0)
}
